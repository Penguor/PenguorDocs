; 
; Penguor Language
; ----------------
;
; (c) Carl Schierig 2020

; abnf grammar according to https://tools.ietf.org/html/rfc2234

program = declaration* EOF


declaration = sysDec
            / contDec
            / dtypeDec
            / varDec
            / functionDec
            / libDec
            / statement

sysDec   = "system" IDENTIFIER [ "<" IDENTIFIER ] blockStmt

contDec  = "container" IDENTIFIER [ "<" IDENTIFIER ] blockStmt

dtypeDec = "datatype" IDENTIFIER [ "<" IDENTIFIER ] blockStmt


varDec      = "var" IDENTIFIER IDENTIFIER [ "=" expression ] [";"] 

functionDec = "fn" IDENTIFIER IDENTIFIER "(" [ parameters ] ")" blockStmt

libDec      = "library" IDENTIFIER blockStmt


statement = preProcessorStmt
          / blockStmt
          / ifStmt
          / whileStmt
          / forStmt
          / doStmt
          / switchStmt
          / expressionStmt


preProcessorStmt = "#" ppDirective CRLF

ppDirective = "include" IDENTIFIER
             / "from" IDENTIFIER "include" IDENTIFIER
             / "safety" ( 0 / 1 / 2 )


blockStmt      = "{" *declaration "}"

ifStmt         = "if" "(" expression ")" "{" 1*statement "}" *elif [ else "{" 1*statement "}" ]

elif           = "elif" "(" expression ")" "{" 1*statement "}"


whileStmt      = "while" "(" expression ")" "{" 1*statement "}"

forStmt        = "for" "(" IDENTIFIER ":" expression ")" "{" 1*statement "}"

doStmt         = "do" "{" 1*statement "}" "while" "(" expression ")" ";"

switchStmt     = "switch" "(" IDENTIFIER ")" "{" 1*( caseStmt ) [ "default" ":" "{" 1*statement "}" ] "}" ; improve grammar & parser to allow for

caseStmt       = "case" expression ":" "{" *statement "}"

expressionStmt = expression ";"



expression     = assignment

assignment     = logicOr [ ( "=" / "+=" / "-=" / "*=" / "/=" ) logicOr ]

logicOr        = logicAnd [ "||" logicOr ]

logicAnd       = equality [ "&&" logicAnd ]

equality       = relation [ ( "==" / "!=" ) equality ]

relation       = addition [ ( "<" /  ">" / "<=" / ">=" ) relation ]

addition       = multiplication [ ( "+" / "-" ) addition ]

multiplication = unary [ ( "*" / "/" ) multiplication ]

unary          = [ "!" / "-" ] unary / call / grouping

call           = IDENTIFIER [ "." call ]
               / callFunction [ "." call ]
               [ base ]

callFunction = IDENTIFIER "(" [ arguments ] ")"

base           = IDENTIFIER / NUM / STRING / "true" / "false" / "null"

grouping       = "(" expression ")"


parameters = varDec *( "," varDec )

arguments  = expression *( "," expression )



; Regular grammar

IDENTIFIER = ALPHA *( ALPHA / DIGIT ) ; TODO: check if alpha contains '_' character

NUM = 1*DIGIT [ "." DIGIT+ ]
    / *DIGIT "." 1*DIGIT

STRING = DQUOTE *(CHAR) DQUOTE
