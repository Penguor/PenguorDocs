; 
; Penguor Language
; ----------------
;
; (c) Carl Schierig 2019-2020
;
; abnf grammar according to https://tools.ietf.org/html/rfc2234

program = *declaration EOF

declaration = ( [ accessMod ] *nonAccessMod ( sysDecl / contDecl / dtypeDecl / functionDecl / varDecl / libDecl ) )
            / usingDecl
            / statement

usingDecl    = "using" call ";" 
sysDecl      = "system" IDENTIFIER [ "<" IDENTIFIER ] blockDecl
contDecl     = "container" IDENTIFIER [ "<" IDENTIFIER ] blockDecl
dtypeDecl    = "datatype" IDENTIFIER [ "<" IDENTIFIER ] blockDecl
functionDecl = varExpr "(" [ parameters ] ")" blockDecl
varDecl      = varExpr [ "=" conditionalOrExpr ] ";"
libDecl      = "library" call blockDecl
blockDecl    = "{" *declaration "}"

statement = preProcessorStmt
          / blockStmt
          / ifStmt
          / whileStmt
          / forStmt
          / doStmt
          / switchStmt
          / expressionStmt

preProcessorStmt = "#" ppDirective NEWLINE
ppDirective = "safety" ( 0 / 1 / 2 )

blockStmt      = "{" *statement "}"

ifStmt         = "if" "(" expression ")" statement *elif [ "else" statement ]
elif           = "elif" "(" expression ")" statement

whileStmt      = "while" "(" expression ")" statement 
forStmt        = "for" "(" varExpr ":" call ")" statement
doStmt         = "do" statement "while" "(" expression ")" ";"
switchStmt     = "switch" "(" call ")" "{" 1*( caseStmt ) [ "default" ":" statement ] "}"
caseStmt       = "case" expression ":" statement

returnStmt     = "return" [ expression ] ";"

expressionStmt = expression ";"


expression     = assignmentExpr

assignmentExpr     = conditionalOrExpr [ ( "=" / "+=" / "-=" / "*=" / "/=" / "%=" / "<<=" / ">>=" / "&=" / "|=" / "^=" ) conditionalOrExpr ]
conditionalOrExpr  = conditionalXorExpr [ "||" conditionalOrExpr ]
conditionalXorExpr = conditionalAndExpr [ "^^" conditionalXorExpr ]
conditionalAndExpr = bitwiseOrExpr [ "&&" conditionalAndExpr ]
bitwiseOrExpr      = bitwiseXorExpr [ "|" bitwiseOrExpr ]
bitwiseXorExpr     = bitwiseAndExpr [ "^" bitwiseXorExpr ]
bitwiseAndExpr     = equalityExpr [ "&" bitwiseAndExpr ]
equalityExpr       = relationExpr [ ( "==" / "!=" ) equalityExpr ]
relationExpr       = bitshiftExpr [ ( "<" /  ">" / "<=" / ">=" ) relationExpr ]
bitshiftExpr       = additionExpr [ ( "<<" / ">>" ) bitshiftExpr ]
additionExpr       = multiplicationExpr [ ( "+" / "-" ) additionExpr ]
multiplicationExpr = unaryExpr [ ( "*" / "/" / "%" ) multiplicationExpr ]
unaryExpr          = [ "!" / "+" / "-" / "~" / "++" / "--" ] base / groupingExpr
base           = keyword / NUM / STRING / call

call           = IDENTIFIER [ ( "." call ) / ( "++" / "--" ) / ( "[" "]" ) ]
               / callFunction [ "." call ]
callFunction = IDENTIFIER "(" [ arguments ] ")"

keyword = "true" / "false" / "null"
varExpr = call IDENTIFIER

groupingExpr       = "(" expression ")"

parameters = varExpr *( "," varExpr )
arguments  = expression *( "," expression )

accessMod = "public" / "private" / "protected" / "restricted"
nonAccessMod = [ "static" / "dynamic" ] [ "abstract" ] [ "const" ]

; Regular grammar

IDENTIFIER = ( ALPHA / %x95 ) *( ALPHA / DIGIT / %x95 ) ; %x95 = '_'

NUM = 1*DIGIT [ "." DIGIT+ ]
    / *DIGIT "." 1*DIGIT

STRING = DQUOTE *(CHAR) DQUOTE

NEWLINE = LF / CRLF