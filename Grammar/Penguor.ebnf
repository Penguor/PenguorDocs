########################################
#
# Penguor Language
# ----------------
#
# (c) Carl Schierig 2019
# all rights reserved
#
########################################

program = head declaration* EOF ;



head = "!#" ( define ":" IDENTIFIER )+ ( "from"? call "include" call )* "#!" ;

define = "library"
       | "safety" ;



declaration = sysDec
            | compDec
            | dtypeDec
            | varDec
            | functionDec
            | statement ;

sysDec = "system" IDENTIFIER ( "<" IDENTIFIER ) blockStmt ;

compDec = "component" IDENTIFIER ( "<" IDENTIFIER ) blockStmt ;

dtypeDec = "datatype" IDENTIFIER ( "<" IDENTIFIER) blockStmt ;



statement = blockStmt
          | ifStmt
          | whileStmt
          | forStmt
          | doStmt
          | switchStmt
          | expressionStmt ;

blockStmt = "{" declaration* "}" ;

ifStmt = "if" "(" expression ")" "{" statement+ "}" ( "elif" "{" statement+ "}" )* ( else "{" statement+ "}" )? ;

whileStmt = "while" "(" expression ")" "{" statement+ "}" ;

forStmt = "for" "(" varDec ":" IDENTIFIER ")" "{" statement+ "}" ;

doStmt = "do" "{" statement+ "}" "while" "(" expression ")" ;

switchStmt = "switch" "(" IDENTIFIER ")" "{" ( caseStmt )+ ( "default" ":" statement* )? "}" ;

caseStmt = "case" "(" IDENTIFIER ")" ":" statement*

expressionStmt = expression ";" ;



expression = assignment ;

assignment = ( call "." )? IDENTIFIER "=" assignment
           |  logic_or ;

logic_or = logic_and ( "||" logic_and )* ;

logic_and = equality ( "&&" equality )* ;

equality = relation ( ( "==" | "!=" ) relation )* ;

relation = addition ( ( "<" |  ">" | "<=" | ">=" ) addition )* ;

addition = multiplication ( ( "+" | "-" ) multiplication )* ;

multiplication = unary ( ( "*" | "/" ) unary )* ;

unary = ( "!" | "-" )? unary | call | grouping ;

call = base ( "." IDENTIFIER | "(" ( arguments )? ")" )* ;

base = IDENTIFIER | NUM | STRING | "true" | "false" | "null" ;

grouping = "(" expression ")" ;



varDec =  var IDENTIFIER IDENTIFIER ( "=" expression )? ";" ;

functionDec = "fn" IDENTIFIER IDENTIFIER "(" ( parameters )? ")" blockStmt ;



parameters = varDec ( "," varDec )* ;

arguments = expression ( "," expression )* ;



# Regular grammar

IDENTIFIER = LETTER ( LETTER | DIGIT )* ;

NUM = DIGIT+ ( "." DIGIT+ )? 
    | DIGIT* "." DIGIT+ ;

STRING = '"' ( all chars except '"' )* '"' ;

LETTER = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' ;
       | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' ;

DIGIT = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' ;
